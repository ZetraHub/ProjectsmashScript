local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "PROJECT SMASH  ▎ZETRA HUB  ▎" , 
    SubTitle = "Update Version",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 360),  -- Diminuindo o tamanho da janela
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    AutoFarm = Window:AddTab({ Title = "▎ COMBAT", Icon = "swords" }),
    Others = Window:AddTab({ Title = "▎ OTHERS", Icon = "star" }),
    Utilities = Window:AddTab({ Title = "▎ UTILITIES", Icon = "target" }),
    Settings = Window:AddTab({ Title = "▎ UI SETTINGS", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Zetra Hub",
        Content = "the script has been loaded!",
        SubContent = "ZetraScripts YT",
        Duration = 5
    })

local Toggle = Tabs.AutoFarm:AddToggle("AutoFarmPlayerToggle", { 
    Title = "Kill Farm (Random Players)", 
    Default = false 
})

local AutoFarmEnabled = false
local currentTarget = nil

local function TeleportToPlayerBack(targetPlayer)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetCharacter = targetPlayer.Character
        local targetPosition = targetCharacter.HumanoidRootPart.Position
        local targetLookVector = targetCharacter.HumanoidRootPart.CFrame.LookVector

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- Teleporte para uma posição atrás do jogador e ligeiramente elevado
                local behindPosition = targetPosition - (targetLookVector * 2) + Vector3.new(0, 2, 0)
                humanoidRootPart.CFrame = CFrame.new(behindPosition)
            end
        end
    end
end

local function FindClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, targetPlayer in pairs(game.Players:GetPlayers()) do
        if targetPlayer ~= game.Players.LocalPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") and targetPlayer.Character.Humanoid.Health > 0 then
            local playerPosition = targetPlayer.Character.HumanoidRootPart.Position
            local localPlayerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            local distance = (playerPosition - localPlayerPosition).Magnitude

            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = targetPlayer
            end
        end
    end

    return closestPlayer
end

local function StartAutoFarm()
    while AutoFarmEnabled do
        if currentTarget == nil or not currentTarget.Character or not game.Players:FindFirstChild(currentTarget.Name) or currentTarget.Character.Humanoid.Health <= 0 then
            currentTarget = FindClosestPlayer()
            if currentTarget then
                TeleportToPlayerBack(currentTarget)
            end
        end

        if currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild("HumanoidRootPart") then
            TeleportToPlayerBack(currentTarget)
        end

        wait(0.1) -- Ajustar o tempo de espera conforme necessário
    end
end

Toggle:OnChanged(function()
    AutoFarmEnabled = Options.AutoFarmPlayerToggle.Value

    if AutoFarmEnabled then
        currentTarget = FindClosestPlayer()
        if currentTarget then
            TeleportToPlayerBack(currentTarget)
        end
        StartAutoFarm()
    else
        currentTarget = nil
        print("Auto Farm desativado.")
    end
end)

Options.AutoFarmPlayerToggle:SetValue(false)

local PVPSection = Tabs.Utilities:AddSection("PVP")

    local KnockbackToggle = Tabs.Utilities:AddToggle("NoKnockBackToggle", { 
        Title = "No KnockBack", 
        Default = false 
    })

    KnockbackToggle:OnChanged(function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            humanoid:SetAttribute("NoKnockBack", KnockbackToggle.Value)  -- Usa um atributo para controlar o Knockback
        end
    end)

end

local StunToggle = Tabs.Utilities:AddToggle("NoStunToggle", { 
    Title = "No Stun", 
    Default = false 
})

StunToggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        humanoid:SetAttribute("NoStun", StunToggle.Value)  -- Usa um atributo para controlar o Stun
    end
end)

game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
    if game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
        -- Verifique se o stun deve ser aplicado
        if not game.Players.LocalPlayer.Character.Humanoid:GetAttribute("NoStun") then
            -- Lógica para aplicar stun
        end
    end
end)

local SpikeToggle = Tabs.Utilities:AddToggle("AutoSpikeToggle", { 
    Title = "Auto Spike", 
    Default = false 
})

local autoSpikeEnabled = false

local function autoSpike()
    while autoSpikeEnabled do
        for _, enemy in pairs(game.Workspace.Enemies:GetChildren()) do
            if enemy:FindFirstChild("Humanoid") then
                enemy.Humanoid:TakeDamage(50)
            end
        end
        wait(1) -- ajusta o tempo entre cada "spike" se necessário
    end
end

SpikeToggle:OnChanged(function()
    autoSpikeEnabled = SpikeToggle.Value

    if autoSpikeEnabled then
        spawn(autoSpike) -- Inicia a função Auto Spike em uma nova thread para evitar travamentos
    else
        print("Auto Spike desativado.")
    end
end)

Options.AutoSpikeToggle:SetValue(false)

local ParryToggle = Tabs.Utilities:AddToggle("ParryAbilityToggle", { 
    Title = "Parry Ability", 
    Default = false 
})

local ParryEnabled = false

local parryKey = Enum.KeyCode.E

local function ActivateParry()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        -- Lógica para ativar o parry (como um escudo temporário)
        print("Parry ativado!")
        humanoid:SetAttribute("ParryActive", true)

        wait(1.5) -- Duração do parry
        humanoid:SetAttribute("ParryActive", false)
        print("Parry desativado!")
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == parryKey and ParryEnabled then
        ActivateParry()
    end
end)

ParryToggle:OnChanged(function()
    ParryEnabled = ParryToggle.Value
end)

game.Players.LocalPlayer.Character.Humanoid.Touched:Connect(function(hit)
    local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    
    if humanoid and humanoid:GetAttribute("ParryActive") then
        -- Lógica para evitar dano enquanto o parry estiver ativo
        print("Ataque bloqueado pelo parry!")
        
        if hit.Parent and hit.Parent:FindFirstChild("Humanoid") then
            local attackerHumanoid = hit.Parent:FindFirstChild("Humanoid")
            attackerHumanoid:TakeDamage(20)  -- Aplica dano ao atacante
        end
    end
end)

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been Loaded.",
    Duration = 8
})

local InvisibilityToggle = Tabs.Others:AddToggle("InvisibilityToggle", { 
    Title = "Invisibility", 
    Default = false 
})

local function SetInvisibility(enabled)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") or part:IsA("MeshPart") then
            part.Transparency = enabled and 1 or 0 -- Torna o personagem invisível (1) ou visível (0)
            part.CanCollide = not enabled -- Desativa colisão quando invisível
        elseif part:IsA("Accessory") then
            part.Handle.Transparency = enabled and 1 or 0 -- Torna acessórios invisíveis
        end
    end
end

InvisibilityToggle:OnChanged(function()
    SetInvisibility(InvisibilityToggle.Value)
end)



-- Adiciona um Toggle (interruptor) para Anti Fling
local FlingToggle = Tabs.AutoFarm:AddToggle("AntiFlingToggle", { 
    Title = "Anti Fling", 
    Default = false 
})

FlingToggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if FlingToggle.Value then
        if humanoidRootPart then
            -- Previne mudanças repentinas na velocidade que possam indicar um fling
            humanoidRootPart.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0) -- Definindo propriedades físicas
        end
    else
        if humanoidRootPart then
            -- Restaura as propriedades físicas padrão do HumanoidRootPart quando desativado
            humanoidRootPart.CustomPhysicalProperties = nil
        end
    end
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if FlingToggle.Value then
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart then
            -- Limitar a velocidade do HumanoidRootPart para evitar fling
            local maxSpeed = 50 -- Ajuste o valor conforme necessário
            if humanoidRootPart.Velocity.Magnitude > maxSpeed then
                humanoidRootPart.Velocity = humanoidRootPart.Velocity.Unit * maxSpeed
            end
        end
    end
end)

local ESPSection = Tabs.AutoFarm:AddSection("ESP")

local ESPFarmToggle = Tabs.AutoFarm:AddToggle("ESP", { 
    Title = "Show Name & Distance", 
    Default = false 
})

local espEnabled = false
local ESPConnections = {}

-- Função para criar o ESP
local function createESP(player)
    if player ~= game.Players.LocalPlayer then
        local character = player.Character or player.CharacterAdded:Wait()

        if character and character:FindFirstChild("Head") then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESP"
            billboard.Adornee = character.Head
            billboard.Size = UDim2.new(0, 200, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.AlwaysOnTop = true

            local nameLabel = Instance.new("TextLabel", billboard)
            nameLabel.Size = UDim2.new(1, 0, 1, 0)
            nameLabel.BackgroundTransparency = 1
            nameLabel.TextColor3 = Color3.new(1, 1, 1)
            nameLabel.TextStrokeTransparency = 0.5
            nameLabel.TextScaled = true
            
            local function updateESP()
                while billboard and billboard.Parent do
                    if character and character:FindFirstChild("Head") then
                        local distance = (game.Players.LocalPlayer.Character.Head.Position - character.Head.Position).Magnitude
                        nameLabel.Text = string.format("%s\n%.0f studs", player.Name, distance)
                    end
                    wait(0.1)
                end
            end

            spawn(updateESP)
            billboard.Parent = character.Head
        end
    end
end

local function enableESP()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            createESP(player)
        end
    end

    table.insert(ESPConnections, game.Players.PlayerAdded:Connect(createESP))
end

-- Função para desativar o ESP
local function disableESP()
    for _, conn in pairs(ESPConnections) do
        conn:Disconnect()
    end

    ESPConnections = {}
    
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("Head") then
            local espBillboard = player.Character.Head:FindFirstChild("ESP")
            if espBillboard then
                espBillboard:Destroy()
            end
        end
    end
end

ESPFarmToggle:OnChanged(function()
    espEnabled = ESPFarmToggle.Value

    if espEnabled then
        print("ESP ativado.")
        enableESP()
    else
        print("ESP desativado.")
        disableESP()
    end
end)

-- Adiciona um Toggle (interruptor) para ESP All Players Highlight
local ESPToggle = Tabs.AutoFarm:AddToggle("ESPPlayersToggle", { 
    Title = "ESP All Players", 
    Default = false 
})

local playerHighlights = {}

local function CreateESP(player)
    if player.Character then
        local highlight = Instance.new("Highlight")
        highlight.Parent = player.Character
        highlight.Adornee = player.Character
        highlight.FillColor = Color3.new(1, 0, 0) -- Cor do destaque (vermelho)
        highlight.FillTransparency = 0.5 -- Transparência do destaque
        playerHighlights[player.UserId] = highlight -- Armazenar o highlight na tabela
    end
end

local function RemoveESP(player)
    if playerHighlights[player.UserId] then
        playerHighlights[player.UserId]:Destroy()
        playerHighlights[player.UserId] = nil -- Limpar a tabela após a remoção
    end
end

local function UpdateESP()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            if ESPToggle.Value then
                CreateESP(player)
            else
                RemoveESP(player)
            end
        end
    end
end

ESPToggle:OnChanged(function()
    if ESPToggle.Value then
        -- Ativar ESP
        UpdateESP()  -- Adiciona ESP a todos os jogadores quando ativado
    else
        -- Desativar ESP
        for _, player in pairs(game.Players:GetPlayers()) do
            RemoveESP(player)  -- Remove ESP de todos os jogadores quando desativado
        end
    end
end)

game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if ESPToggle.Value then
            CreateESP(player) -- Cria ESP para novos jogadores se o toggle estiver ativo
        end
    end)
end)

game.Players.PlayerRemoving:Connect(function(player)
    RemoveESP(player)
end)

for _, player in pairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        -- Cria ESP para jogadores já existentes apenas se o toggle estiver ativado
        if ESPToggle.Value then
            CreateESP(player)
        end
    end
end

local VoidToggle = Tabs.Utilities:AddToggle("NoVoidToggle", { 
    Title = "No Void", 
    Default = false 
})

VoidToggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        humanoid:SetAttribute("NoVoid", VoidToggle.Value)  -- Usa um atributo para controlar o No Void
    end
end)

game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
    if game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
        -- Verifique se o void deve ser aplicado
        if not game.Players.LocalPlayer.Character.Humanoid:GetAttribute("NoVoid") then
            -- Lógica para aplicar o void (por exemplo, remoção do jogador)
        end
    end
end)

local EXTRASection = Tabs.AutoFarm:AddSection("EXTRA")

local HitboxToggle = Tabs.AutoFarm:AddToggle("HitboxToggle", { 
    Title = "Hitbox Aura", 
    Default = false 
})

local hitbox -- Variável para armazenar a hitbox
local aura -- Variável para armazenar a aura
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hitboxRadius = 10 -- Raio da hitbox
local auraColor = Color3.new(1, 0, 0) -- Cor da aura (vermelho)

-- Função para criar a hitbox e a aura
local function createHitboxAndAura()
    -- Criar a parte da hitbox
    hitbox = Instance.new("Part")
    hitbox.Size = Vector3.new(hitboxRadius * 2, hitboxRadius * 2, hitboxRadius * 2)
    hitbox.Position = character.HumanoidRootPart.Position
    hitbox.Anchored = true
    hitbox.CanCollide = false
    hitbox.Transparency = 1 -- Tornar invisível
    hitbox.Parent = workspace

    -- Criar a aura
    aura = Instance.new("Part")
    aura.Size = Vector3.new(hitboxRadius * 2, hitboxRadius * 2, hitboxRadius * 2)
    aura.Position = hitbox.Position
    aura.Anchored = true
    aura.CanCollide = false
    aura.BrickColor = BrickColor.new(auraColor) -- Aqui pode gerar erro
    aura.Color = auraColor -- Defina a cor corretamente
    aura.Material = Enum.Material.Neon
    aura.Transparency = 0.5 -- Transparência da aura
    aura.Parent = workspace

    -- Atualizar a posição da hitbox e da aura
    local function updateHitboxPosition()
        if character and character:FindFirstChild("HumanoidRootPart") then
            hitbox.Position = character.HumanoidRootPart.Position
            aura.Position = hitbox.Position
        end
    end

    -- Conectar a atualização de posição ao evento Heartbeat
    local heartbeatConnection
    heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function()
        updateHitboxPosition()
        
        -- Verificar se a hitbox ainda existe, se não, desconectar
        if not hitbox or not hitbox:IsDescendantOf(workspace) then
            heartbeatConnection:Disconnect()
        end
    end)

    -- Detectar quando algo entra na hitbox
    hitbox.Touched:Connect(function(hit)
        print("Hitbox tocada por: " .. hit.Name)
    end)
end

-- Função para remover a hitbox e a aura
local function removeHitboxAndAura()
    if hitbox then
        hitbox:Destroy()
        hitbox = nil
    end
    if aura then
        aura:Destroy()
        aura = nil
    end
end

-- Conectar o toggle para ativar/desativar a hitbox
HitboxToggle:OnChanged(function(value)
    if value then
        createHitboxAndAura() -- Ativar hitbox e aura
    else
        removeHitboxAndAura() -- Desativar hitbox e aura
    end
end)

-- Adiciona um Toggle (interruptor) para No Dash Cooldown
local DashToggle = Tabs.AutoFarm:AddToggle("NoDashCooldownToggle", { 
    Title = "No Dash Cooldown", 
    Default = false 
})

DashToggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        if DashToggle.Value then
            -- Desativar o cooldown do dash
            humanoid:SetAttribute("NoDashCooldown", true)  -- Use um atributo para controlar
        else
            -- Reativar o cooldown do dash
            humanoid:SetAttribute("NoDashCooldown", false)
        end
    end
end)

game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
    if game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
        if humanoid:GetAttribute("NoDashCooldown") then
            -- Aqui você deve modificar o código do seu dash para ignorar o cooldown
            -- Isso pode variar dependendo de como o dash é implementado no seu jogo
        end
    end
end)

local AutoDeployToggle = Tabs.AutoFarm:AddToggle("AutoDeployToggle", { 
    Title = "Auto Deploy", 
    Default = false -- Default como true
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local autoDeployActive = false -- Variável de controle

-- Função para realizar o deploy
local function deployCharacter()
    if character and character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = character.HumanoidRootPart
        -- Defina uma posição segura para o deploy
        local safePosition = humanoidRootPart.Position + Vector3.new(0, 5, 0) -- 5 unidades acima da posição atual

        humanoidRootPart.CFrame = CFrame.new(safePosition) -- Mover para a posição segura
    end
end

-- Função para o loop contínuo
local function autoDeployLoop()
    while autoDeployActive do
        deployCharacter()
        wait(1) -- Tempo entre cada deploy (ajuste conforme necessário)
    end
end

-- Conectar o toggle para ativar/desativar o auto deploy
AutoDeployToggle:OnChanged(function(value)
    autoDeployActive = value -- Atualiza a variável de controle
    if autoDeployActive then
        -- Inicia o loop de deploy contínuo em uma nova thread
        spawn(autoDeployLoop)
    end
end)

local AntiAFKToggle = Tabs.Others:AddToggle("AntiAFKToggle", {
    Title = "Anti AFK",
    Default = true -- Default como true
})

local AntiAFKEnabled = AntiAFKToggle:GetValue()  -- Pega o valor inicial do toggle (inicialmente true)
local virtualUser = game:GetService("VirtualUser")

local function AntiAFK()
    while AntiAFKEnabled do
        virtualUser:CaptureController()
        virtualUser:ClickButton2(Vector2.new())  -- Simula clique direito do mouse
        wait(60)  -- Intervalo fixo para simular atividade
    end
end

AntiAFKToggle:OnChanged(function(value)
    AntiAFKEnabled = value

    if AntiAFKEnabled then
        -- Conecte o evento quando o jogador for detectado como inativo
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            virtualUser:CaptureController()
            virtualUser:ClickButton2(Vector2.new())
        end)

        spawn(AntiAFK)  -- Inicia o Anti AFK em uma nova thread
    else
        print("Anti AFK desativado.")
    end
end)

-- Iniciar o Anti AFK automaticamente se o toggle estiver ativado
if AntiAFKEnabled then
    spawn(AntiAFK)
end